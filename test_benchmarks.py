#!/usr/bin/env python3

import os,sys
import subprocess
import csv
import time
import gc
import collections
import argparse

OKGREEN = '\033[92m'
WARNING = '\033[93m'
ENDC = '\033[0m'

def okay( msg):
    return OKGREEN + msg + ENDC

def warn( msg):
    return  WARNING + msg + ENDC

parser = argparse.ArgumentParser(prog='test')
parser.add_argument('--quick', help='specify how fast you want the test be done', type=int, required=False, default = 1)
parser.add_argument('--small', action='store_true', help='use small benchmarks')
parser.add_argument('--middle', action='store_true', help='use middle benchmarks')
parser.add_argument('--large', action='store_true', help='use large benchmarks')
args = parser.parse_args()

# middle
testFiles_middle=["div2.c.30","mult1.c.30","div3.c.30","div.c.30","mult2.c.30",\
           "test_v7_r7_vr10_c1_s24535","test_v5_r10_vr5_c1_s13195", "div2.c.40","mult1.c.40","test_v7_r7_vr1_c1_s24449",\
           "div3.c.40","div.c.40","mult2.c.40","test_v7_r7_vr5_c1_s3582","test_v7_r7_vr1_c1_s22845",\
           "test_v7_r7_vr5_c1_s19694","test_v7_r7_vr5_c1_s14675","test_v7_r7_vr10_c1_s32506","test_v7_r7_vr10_c1_s10625","test_v7_r7_vr1_c1_s4574",\
           "test_v5_r10_vr5_c1_s8690","test_v5_r10_vr1_c1_s32538","test_v5_r10_vr5_c1_s13679","test_v5_r10_vr10_c1_s15708","test_v5_r10_vr10_c1_s7608",\
           "test_v5_r10_vr1_c1_s19145","test_v5_r10_vr1_c1_s13516","test_v5_r10_vr10_c1_s21502","sin2.c.10","div2.c.50",\
           "mult1.c.50","div3.c.50","mult2.c.50","div.c.50"]
expected_results_middle = ["sat", "sat","sat","sat","sat","sat","sat","sat","sat","unsat","sat","sat","sat","sat","sat","sat","sat","sat","sat","sat","unsat","unsat","sat","unsat","unsat","sat","sat","unsat","sat","sat","sat","sat","sat","sat"]

# small

testFiles_small = [
    "test_v5_r15_vr10_c1_s11127",
    "square",
    "e1_2.c",
    "e1_1.c",
    "e1.c",
    "pow5",
    "e2a_3.c",
    "div2.c.3",
    "e2a_1.c",
    "div3.c.3",
    "div.c.3",
    "mult1.c.3",
    "e2a_2.c",
    "mult2.c.3",
    "sine.1.0.i",
    "e3_2.c",
    "e2_3.c",
    "e2_1.c",
    "f23",
    "sine.8.0.i",
    "sine.7.0.i",
    "sine.6.0.i",
    "sine.5.0.i",
    "sine.4.0.i",
    "sine.3.0.i",
    "sine.2.0.i",
    "e2_2.c",
    "e3_1.c",
    "square.8.0.i",
    "square.7.0.i",
    "square.6.0.i",
    "square.5.0.i",
    "square.4.0.i",
    "square.3.0.i",
    "square.2.0.i",
    "square.1.0.i",
    "e2.c",
    "newton.8.1.i",
    "newton.5.1.i",
    "newton.7.1.i",
    "newton.6.1.i",
    "newton.4.1.i",
    "newton.3.1.i",
    "newton.2.1.i",
    "newton.1.1.i",
    "e3.c",
    "test_v3_r3_vr5_c1_s26769",
    "test_v3_r3_vr5_c1_s16867",
    "test_v3_r3_vr5_c1_s16641",
    "test_v3_r3_vr1_c1_s6731",
    "test_v3_r3_vr1_c1_s5578",
    "test_v3_r3_vr1_c1_s10392",
    "test_v3_r3_vr10_c1_s29304",
    "test_v3_r3_vr10_c1_s24300",
    "test_v3_r3_vr10_c1_s14052",
    "add_01_1_4",
    "add_01_1_3",
    "add_01_1_2",
    "add_01_1_1",
    "add_01_10_4",
    "add_01_10_3",
    "add_01_10_2",
    "add_01_10_1",
    "add_01_100_4",
    "add_01_100_3",
    "add_01_100_2",
    "add_01_100_1",
    "add_01_1000_4",
    "add_01_1000_3",
    "add_01_1000_2",
    "add_01_1000_1",
    "mul_03_3_1",
    "mul_03_30_4",
    "mul_03_30_1",
    "mul_03_3000_1",
    "mul_000003_30000_1",
    "div2.c.10",
    "mult1.c.10",
    "div3.c.10",
    "div.c.10",
    "mult2.c.10",
    "mul_03_30_7",
    "mul_03_30_6",
    "mul_03_30_5",
    "mul_03_30_3",
    "mul_03_30_2",
    "newton.8.2.i",
    "newton.5.2.i",
    "sqrt.c.2",
    "newton.7.2.i",
    "newton.6.2.i",
    "newton.4.2.i",
    "newton.3.2.i",
    "newton.2.2.i",
    "newton.1.2.i",
    "sin2.c.2",
    "square_and_power_inverse",
    "newton.8.3.i",
    "newton.5.3.i",
    "newton.7.3.i",
    "newton.6.3.i",
    "newton.4.3.i",
    "newton.3.3.i",
    "newton.2.3.i",
    "newton.1.3.i",
    "div2.c.20",
    "mult1.c.20",
    "div3.c.20",
    "div.c.20",
    "mult2.c.20",
    "qurt.c.2",
    "test_v3_r8_vr5_c1_s8257",
    "test_v3_r8_vr5_c1_s10746",
    "test_v3_r8_vr1_c1_s733",
    "test_v3_r8_vr10_c1_s18214",
    "test_v3_r8_vr1_c1_s23752",
    "test_v3_r8_vr1_c1_s20372",
    "test_v3_r8_vr10_c1_s5590",
    "test_v3_r8_vr5_c1_s1507",
    "test_v3_r8_vr10_c1_s4660",
    "test_v5_r5_vr1_c1_s14623",
    "test_v5_r5_vr1_c1_s16138",
    "test_v5_r5_vr10_c1_s7194",
    "test_v5_r5_vr10_c1_s5379",
    "test_v5_r5_vr5_c1_s9855",
    "test_v5_r5_vr5_c1_s2800",
    "test_v5_r5_vr1_c1_s15604",
    "test_v5_r5_vr10_c1_s5996",
    "test_v5_r5_vr5_c1_s24018",
    "sin2.c.5",
    "sqrt.c.5"
]

expected_results_small = [
    "sat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsupported",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "unsat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "unsat"
]


# large

testFiles_large = [
    "sqrt.c.10",
    "test_v5_r15_vr5_c1_s8246",
    "test_v5_r15_vr1_c1_s26845",
    "test_v5_r15_vr10_c1_s25268",
    "test_v5_r15_vr5_c1_s26657",
    "test_v5_r15_vr5_c1_s23844",
    "test_v5_r15_vr1_c1_s8236",
    "test_v5_r15_vr1_c1_s32559",
    "test_v5_r15_vr10_c1_s14516",
    "qurt.c.5",
    "test_v7_r12_vr5_c1_s29826",
    "test_v7_r12_vr10_c1_s15994",
    "test_v7_r12_vr10_c1_s30410",
    "test_v7_r12_vr5_c1_s14336",
    "test_v7_r12_vr5_c1_s8938",
    "test_v7_r12_vr1_c1_s10576",
    "test_v7_r12_vr1_c1_s22787",
    "test_v7_r12_vr10_c1_s18160",
    "test_v7_r12_vr1_c1_s703",
    "sin2.c.15",
    "gaussian.c.25",
    "sqrt.c.15",
    "test_v7_r17_vr5_c1_s2807",
    "test_v7_r17_vr1_c1_s30331",
    "test_v7_r17_vr5_c1_s25451",
    "sin2.c.20",
    "test_v7_r17_vr10_c1_s8773",
    "test_v7_r17_vr5_c1_s4772",
    "test_v7_r17_vr1_c1_s24331",
    "test_v7_r17_vr1_c1_s23882",
    "test_v7_r17_vr10_c1_s3680",
    "test_v7_r17_vr10_c1_s18654",
    "sin.c.25",
    "sin2.c.25",
    "sqrt.c.25",
    "sqrt.c.20",
    "qurt.c.10",
    "qurt.c.15",
    "gaussian.c.75",
    "qurt.c.25",
    "qurt.c.20",
    "sin2.c.75",
    "sin.c.75",
    "gaussian.c.125",
    "sin2.c.125",
    "sin.c.125",
    "gaussian.c.175",
    "sin2.c.175",
    "sin.c.175"
]

expected_results_large = [
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "sat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "sat",
    "sat",
    "unsat",
    "unsat",
    "sat",
    "unsat",
    "sat",
    "sat",
    "timeout",
    "unsat",
    "unsat",
    "unsat",
    "unsat",
    "timeout",
    "unsat",
    "unsat",
    "timeout",
    "timeout",
    "timeout",
    "timeout",
    "timeout",
    "timeout",
    "timeout",
    "timeout"
]


if args.small:
    testFiles = testFiles_small
    expected_results = expected_results_small
    benchmark_dir = "small"
elif args.middle:
    testFiles = testFiles_middle
    expected_results = expected_results_middle
    benchmark_dir = "middle"
elif args.large:
    testFiles = testFiles_large
    expected_results = expected_results_large
    benchmark_dir = "large"


for i, (f, expected) in enumerate (zip (testFiles, expected_results)):
    if (i + 1) % args.quick != 0: continue

    fileName = f"Benchmarks/{benchmark_dir}/" + f + ".smt2"

    print("(%s)" %(i + 1), "Working on", fileName)
    COMMAND0 = 'make -j IN=%s' % fileName
    print("   Compiling ...")
    subprocess.check_call(COMMAND0.split(), stdout=open(os.devnull, 'wb'))
    print("   Solving ...")
    COMMAND='python3 xsat.py --bench'
    satisfiability = subprocess.check_output(COMMAND.split()).decode('utf-8').rstrip()
    print("   ==> "+ satisfiability, okay("[Expected]") if satisfiability == expected else warn("[Unexpected]"))